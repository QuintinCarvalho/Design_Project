
ECE_388_Design_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000360  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9a  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a14  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000094  00000000  00000000  00002353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 31       	cpi	r26, 0x15	; 21
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  ea:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <time>:
  f2:	fc 01       	movw	r30, r24
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <__system_time>
  fc:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <__system_time+0x1>
 100:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__system_time+0x2>
 104:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__system_time+0x3>
 108:	0f be       	out	0x3f, r0	; 63
 10a:	30 97       	sbiw	r30, 0x00	; 0
 10c:	21 f0       	breq	.+8      	; 0x116 <time+0x24>
 10e:	60 83       	st	Z, r22
 110:	71 83       	std	Z+1, r23	; 0x01
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	93 83       	std	Z+3, r25	; 0x03
 116:	08 95       	ret

00000118 <AnalogRead8>:
}


uint8_t AnalogRead8(uint8_t channel)
{
	ADMUX = (0b01<<REFS0) | (1<<ADLAR) | (channel<<MUX0);
 118:	80 66       	ori	r24, 0x60	; 96
 11a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIE) | (0b111<<ADPS0);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	87 e8       	ldi	r24, 0x87	; 135
 124:	80 83       	st	Z, r24
	ADCSRB = 0b000<<ADTS0;
 126:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	ADCSRA |= (1<<ADSC);
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF))==0);
 130:	80 81       	ld	r24, Z
 132:	84 ff       	sbrs	r24, 4
 134:	fd cf       	rjmp	.-6      	; 0x130 <AnalogRead8+0x18>
	return ADCH;		// High byte of result
 136:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 13a:	08 95       	ret

0000013c <Roll_Dice>:

uint8_t Roll_Dice()
{
	//srand(time(NULL));
	val=rand();
 13c:	0e 94 3b 01 	call	0x276	; 0x276 <rand>
 140:	38 2f       	mov	r19, r24
 142:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <val>
	random_output = val%10;
 146:	9d ec       	ldi	r25, 0xCD	; 205
 148:	39 9f       	mul	r19, r25
 14a:	91 2d       	mov	r25, r1
 14c:	11 24       	eor	r1, r1
 14e:	89 2f       	mov	r24, r25
 150:	86 95       	lsr	r24
 152:	86 95       	lsr	r24
 154:	86 95       	lsr	r24
 156:	98 2f       	mov	r25, r24
 158:	99 0f       	add	r25, r25
 15a:	29 2f       	mov	r18, r25
 15c:	22 0f       	add	r18, r18
 15e:	22 0f       	add	r18, r18
 160:	92 0f       	add	r25, r18
 162:	83 2f       	mov	r24, r19
 164:	89 1b       	sub	r24, r25
 166:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <random_output>
	temp = random_output;
 16a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	return random_output;
}
 16e:	08 95       	ret

00000170 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRC = 0b11111110;
 170:	8e ef       	ldi	r24, 0xFE	; 254
 172:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 178:	1b b8       	out	0x0b, r1	; 11
	srand(time(NULL));
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 79 00 	call	0xf2	; 0xf2 <time>
 182:	cb 01       	movw	r24, r22
 184:	0e 94 40 01 	call	0x280	; 0x280 <srand>
    while (1) 
    {
		PORTD = dicetab[temp];
 188:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ec 5f       	subi	r30, 0xFC	; 252
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 81       	ld	r24, Z
 194:	8b b9       	out	0x0b, r24	; 11
		Accelero=AnalogRead8(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 8c 00 	call	0x118	; 0x118 <AnalogRead8>
 19c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Accelero>
		if (Accelero >= 150)
 1a0:	86 39       	cpi	r24, 0x96	; 150
 1a2:	d8 f0       	brcs	.+54     	; 0x1da <main+0x6a>
		{
			dice_value=Roll_Dice();
 1a4:	0e 94 9e 00 	call	0x13c	; 0x13c <Roll_Dice>
 1a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dice_value>
			if (dice_value > 0 & dice_value <= 6)
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	98 0f       	add	r25, r24
 1b0:	96 30       	cpi	r25, 0x06	; 6
 1b2:	78 f4       	brcc	.+30     	; 0x1d2 <main+0x62>
	return random_output;
}

void DisplayDice(uint8_t what)
{
	PORTD = dicetab[what]; // obtain the desired value d from dicetab
 1b4:	e8 2f       	mov	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 5f       	subi	r30, 0xFC	; 252
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f e3       	ldi	r18, 0x3F	; 63
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x56>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x60>
 1d0:	00 00       	nop
				
			}
			
		}
		
		if (Accelero < 150)
 1d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Accelero>
 1d6:	86 39       	cpi	r24, 0x96	; 150
 1d8:	b8 f6       	brcc	.-82     	; 0x188 <main+0x18>
		{
			PORTD = 0;
 1da:	1b b8       	out	0x0b, r1	; 11
 1dc:	d5 cf       	rjmp	.-86     	; 0x188 <main+0x18>

000001de <do_rand>:
 1de:	8f 92       	push	r8
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	68 81       	ld	r22, Y
 1f6:	79 81       	ldd	r23, Y+1	; 0x01
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	9b 81       	ldd	r25, Y+3	; 0x03
 1fc:	61 15       	cp	r22, r1
 1fe:	71 05       	cpc	r23, r1
 200:	81 05       	cpc	r24, r1
 202:	91 05       	cpc	r25, r1
 204:	21 f4       	brne	.+8      	; 0x20e <do_rand+0x30>
 206:	64 e2       	ldi	r22, 0x24	; 36
 208:	79 ed       	ldi	r23, 0xD9	; 217
 20a:	8b e5       	ldi	r24, 0x5B	; 91
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	2d e1       	ldi	r18, 0x1D	; 29
 210:	33 ef       	ldi	r19, 0xF3	; 243
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	0e 94 4b 01 	call	0x296	; 0x296 <__divmodsi4>
 21a:	49 01       	movw	r8, r18
 21c:	5a 01       	movw	r10, r20
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	a7 ea       	ldi	r26, 0xA7	; 167
 224:	b1 e4       	ldi	r27, 0x41	; 65
 226:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__muluhisi3>
 22a:	6b 01       	movw	r12, r22
 22c:	7c 01       	movw	r14, r24
 22e:	ac ee       	ldi	r26, 0xEC	; 236
 230:	b4 ef       	ldi	r27, 0xF4	; 244
 232:	a5 01       	movw	r20, r10
 234:	94 01       	movw	r18, r8
 236:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__mulohisi3>
 23a:	dc 01       	movw	r26, r24
 23c:	cb 01       	movw	r24, r22
 23e:	8c 0d       	add	r24, r12
 240:	9d 1d       	adc	r25, r13
 242:	ae 1d       	adc	r26, r14
 244:	bf 1d       	adc	r27, r15
 246:	b7 ff       	sbrs	r27, 7
 248:	03 c0       	rjmp	.+6      	; 0x250 <do_rand+0x72>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	a1 09       	sbc	r26, r1
 24e:	b0 48       	sbci	r27, 0x80	; 128
 250:	88 83       	st	Y, r24
 252:	99 83       	std	Y+1, r25	; 0x01
 254:	aa 83       	std	Y+2, r26	; 0x02
 256:	bb 83       	std	Y+3, r27	; 0x03
 258:	9f 77       	andi	r25, 0x7F	; 127
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	bf 90       	pop	r11
 268:	af 90       	pop	r10
 26a:	9f 90       	pop	r9
 26c:	8f 90       	pop	r8
 26e:	08 95       	ret

00000270 <rand_r>:
 270:	0e 94 ef 00 	call	0x1de	; 0x1de <do_rand>
 274:	08 95       	ret

00000276 <rand>:
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 ef 00 	call	0x1de	; 0x1de <do_rand>
 27e:	08 95       	ret

00000280 <srand>:
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 288:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 28c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 290:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 294:	08 95       	ret

00000296 <__divmodsi4>:
 296:	05 2e       	mov	r0, r21
 298:	97 fb       	bst	r25, 7
 29a:	1e f4       	brtc	.+6      	; 0x2a2 <__divmodsi4+0xc>
 29c:	00 94       	com	r0
 29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__negsi2>
 2a2:	57 fd       	sbrc	r21, 7
 2a4:	07 d0       	rcall	.+14     	; 0x2b4 <__divmodsi4_neg2>
 2a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__udivmodsi4>
 2aa:	07 fc       	sbrc	r0, 7
 2ac:	03 d0       	rcall	.+6      	; 0x2b4 <__divmodsi4_neg2>
 2ae:	4e f4       	brtc	.+18     	; 0x2c2 <__divmodsi4_exit>
 2b0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__negsi2>

000002b4 <__divmodsi4_neg2>:
 2b4:	50 95       	com	r21
 2b6:	40 95       	com	r20
 2b8:	30 95       	com	r19
 2ba:	21 95       	neg	r18
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	4f 4f       	sbci	r20, 0xFF	; 255
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255

000002c2 <__divmodsi4_exit>:
 2c2:	08 95       	ret

000002c4 <__negsi2>:
 2c4:	90 95       	com	r25
 2c6:	80 95       	com	r24
 2c8:	70 95       	com	r23
 2ca:	61 95       	neg	r22
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	08 95       	ret

000002d4 <__muluhisi3>:
 2d4:	0e 94 9f 01 	call	0x33e	; 0x33e <__umulhisi3>
 2d8:	a5 9f       	mul	r26, r21
 2da:	90 0d       	add	r25, r0
 2dc:	b4 9f       	mul	r27, r20
 2de:	90 0d       	add	r25, r0
 2e0:	a4 9f       	mul	r26, r20
 2e2:	80 0d       	add	r24, r0
 2e4:	91 1d       	adc	r25, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	08 95       	ret

000002ea <__mulshisi3>:
 2ea:	b7 ff       	sbrs	r27, 7
 2ec:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__muluhisi3>

000002f0 <__mulohisi3>:
 2f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__muluhisi3>
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	08 95       	ret

000002fa <__udivmodsi4>:
 2fa:	a1 e2       	ldi	r26, 0x21	; 33
 2fc:	1a 2e       	mov	r1, r26
 2fe:	aa 1b       	sub	r26, r26
 300:	bb 1b       	sub	r27, r27
 302:	fd 01       	movw	r30, r26
 304:	0d c0       	rjmp	.+26     	; 0x320 <__udivmodsi4_ep>

00000306 <__udivmodsi4_loop>:
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	ee 1f       	adc	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	a2 17       	cp	r26, r18
 310:	b3 07       	cpc	r27, r19
 312:	e4 07       	cpc	r30, r20
 314:	f5 07       	cpc	r31, r21
 316:	20 f0       	brcs	.+8      	; 0x320 <__udivmodsi4_ep>
 318:	a2 1b       	sub	r26, r18
 31a:	b3 0b       	sbc	r27, r19
 31c:	e4 0b       	sbc	r30, r20
 31e:	f5 0b       	sbc	r31, r21

00000320 <__udivmodsi4_ep>:
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	1a 94       	dec	r1
 32a:	69 f7       	brne	.-38     	; 0x306 <__udivmodsi4_loop>
 32c:	60 95       	com	r22
 32e:	70 95       	com	r23
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	bd 01       	movw	r22, r26
 33a:	cf 01       	movw	r24, r30
 33c:	08 95       	ret

0000033e <__umulhisi3>:
 33e:	a2 9f       	mul	r26, r18
 340:	b0 01       	movw	r22, r0
 342:	b3 9f       	mul	r27, r19
 344:	c0 01       	movw	r24, r0
 346:	a3 9f       	mul	r26, r19
 348:	70 0d       	add	r23, r0
 34a:	81 1d       	adc	r24, r1
 34c:	11 24       	eor	r1, r1
 34e:	91 1d       	adc	r25, r1
 350:	b2 9f       	mul	r27, r18
 352:	70 0d       	add	r23, r0
 354:	81 1d       	adc	r24, r1
 356:	11 24       	eor	r1, r1
 358:	91 1d       	adc	r25, r1
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
